# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'face_parsing_Demo_256.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import cv2
import numpy as np
import torch
import onnx
import onnxruntime
from PIL import Image
import torchvision.transforms as transforms

from ui.mouse_event import GraphicsScene
from visualization import visualization

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *

from os import environ

def suppress_qt_warnings():
    environ["QT_DEVICE_PIXEL_RATIO"] = "0"
    environ["QT_AUTO_SCREEN_SCALE_FACTOR"] = "1"
    environ["QT_SCREEN_SCALE_FACTORS"] = "1"
    environ["QT_SCALE_FACTOR"] = "1"

class Ui_MainWindow(object):

    def open(self):
        # fileName, _ = QFileDialog.getOpenFileName(self, "Open File", QDir.currentPath())
        fileName, _ = QFileDialog.getOpenFileName(self.centralwidget, "Open File Dialog", "", "All Files (*);;Python Files (*.py)")

        if fileName:
            image = QPixmap(fileName)
            mat_img = Image.open(fileName)
            self.img = mat_img.copy()
            if image.isNull():
                QMessageBox.information(self, "Image Viewer",
                                        "Cannot load %s." % fileName)
                return
            image = image.scaled(self.graphicsView.size(), Qt.IgnoreAspectRatio)

            if len(self.input_image.items()) > 0:
                self.input_image.removeItem(self.input_image.items()[-1])
            self.input_image.addPixmap(image)

            self.img = cv2.imread(fileName, cv2.IMREAD_COLOR)



    def save_img(self):
        if type(self.output_img):
            fileName, _ = QFileDialog.getSaveFileName(self.centralwidget, "Save File", QDir.currentPath())
            #cv2.imwrite("./r.png", self.output_img)
            cv2.imwrite(fileName+ '.jpg', self.output_img)

            # if self.output_img is not None and not self.output_img.empty():
            #     cv2.imwrite(fileName + '.jpg', self.output_img)
            # else:
            #     print("Image data is empty or invalid.")

    def face_parsing(self):
        image = self.img
        # print(image.shape)  # (256, 256, 3)

        normalize = transforms.Normalize(mean=[0.485, 0.456, 0.406],
                                         std=[0.229, 0.224, 0.225])

        transform = transforms.Compose([
            transforms.ToTensor(),
            normalize,
        ])

        image_trans = transform(image)

        image_trans = image_trans.unsqueeze(0)
        # print(image_trans.shape)  # torch.Size([1, 3, 256, 256])

        ort_session = onnxruntime.InferenceSession("./onnx/best_CAECAM_256_bn_for_test.onnx", providers=['CUDAExecutionProvider', 'CPUExecutionProvider'])

        interp = torch.nn.Upsample(size=(256, 256), mode='bilinear', align_corners=True)

        ort_inputs = {ort_session.get_inputs()[0].name: np.array(image_trans)}
        # print(ort_inputs['input'].shape)  # (1, 3, 256, 256)

        results = torch.from_numpy(ort_session.run(None, ort_inputs)[0])
        # results = results.squeeze(0)
        # print(results.shape)

        parsing = interp(results).data.cpu().numpy()
        parsing = parsing.transpose(0, 2, 3, 1)  # NCHW NHWC
        parsing_preds = np.asarray(np.argmax(parsing, axis=3))
        parsing_preds = parsing_preds.squeeze(0)
        parsing_preds = np.uint8(parsing_preds)

        color_img = visualization(image, parsing_preds)

        # color_img = color_img.scaled(self.graphicsView_2.size(), Qt.IgnoreAspectRatio)

        if len(self.output_image.items()) > 0:
            self.output_image.removeItem(self.output_image.items()[-1])

        # color_img = color_img[:, :, :-1]

        height, width, channel = color_img.shape
        bytesPerLine = 3 * width
        qImg = QImage(color_img.data, width, height, bytesPerLine, QImage.Format_RGB888)
        pixmap = QPixmap.fromImage(qImg)
        self.output_image.addPixmap(pixmap)

        self.output_img = cv2.cvtColor(color_img, cv2.COLOR_RGB2BGR)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(701, 489)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(20, 10, 111, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton.sizePolicy().hasHeightForWidth())
        self.pushButton.setSizePolicy(sizePolicy)
        self.pushButton.setStyleSheet("background-color: rgb(223, 223, 223);\n"
"font: 63 12pt \"Sitka Subheading Semibold\";")
        self.pushButton.setObjectName("pushButton")
        self.pushButton_12 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_12.setGeometry(QtCore.QRect(160, 10, 111, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_12.sizePolicy().hasHeightForWidth())
        self.pushButton_12.setSizePolicy(sizePolicy)
        self.pushButton_12.setStyleSheet("background-color: rgb(223, 223, 223);\n"
"font: 63 12pt \"Sitka Subheading Semibold\";")
        self.pushButton_12.setObjectName("pushButton_12")
        # self.label = QtWidgets.QLabel(self.centralwidget)
        # self.label.setGeometry(QtCore.QRect(30, 90, 256, 256))
        # self.label.setText("")
        # self.label.setObjectName("label")
        # self.label_2 = QtWidgets.QLabel(self.centralwidget)
        # self.label_2.setGeometry(QtCore.QRect(340, 90, 256, 256))
        # self.label_2.setText("")
        # self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(540, 380, 141, 41))
        self.label_3.setStyleSheet("image: url(:/gui_images/signature04.png);")
        self.label_3.setText("")
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(340, 370, 181, 61))
        self.label_4.setStyleSheet("image: url(:/gui_images/sub01_01_04_01_img12.png)")
        self.label_4.setText("")
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(30, 60, 111, 21))
        self.label_5.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_5.setStyleSheet("font: 14pt \"Arial\";\n"
"background-color: rgb(217, 217, 217);")
        self.label_5.setAlignment(QtCore.Qt.AlignCenter)
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(410, 60, 111, 21))
        self.label_6.setStyleSheet("font: 14pt \"Arial\";\n"
"background-color: rgb(218, 218, 218);")
        self.label_6.setAlignment(QtCore.Qt.AlignCenter)
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(20, 50, 281, 311))
        self.label_7.setStyleSheet("background-color: rgb(240, 240, 240);")
        self.label_7.setText("")
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(400, 50, 281, 311))
        self.label_8.setStyleSheet("background-color: rgb(240, 240, 240);")
        self.label_8.setText("")
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(20, 400, 91, 21))
        self.label_9.setObjectName("label_9")
        self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView.setGeometry(QtCore.QRect(30, 90, 256, 256))
        self.graphicsView.setObjectName("graphicsView")
        self.graphicsView_2 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_2.setGeometry(QtCore.QRect(410, 90, 256, 256))
        self.graphicsView_2.setObjectName("graphicsView_2")
        self.pushButton_13 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_13.setGeometry(QtCore.QRect(310, 190, 81, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_13.sizePolicy().hasHeightForWidth())
        self.pushButton_13.setSizePolicy(sizePolicy)
        self.pushButton_13.setStyleSheet("background-color: rgb(223, 223, 223);\n"
                                         "font: 63 12pt \"Sitka Subheading Semibold\";")
        self.pushButton_13.setObjectName("pushButton_13")
        self.label_8.raise_()
        self.label_7.raise_()
        self.pushButton.raise_()
        self.pushButton_12.raise_()
        # self.label.raise_()
        # self.label_2.raise_()
        self.graphicsView.raise_()
        self.graphicsView_2.raise_()
        self.label_3.raise_()
        self.label_4.raise_()
        self.label_5.raise_()
        self.label_6.raise_()
        self.label_9.raise_()
        self.pushButton_13.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 701, 22))
        self.menubar.setObjectName("menubar")
        self.menuLip_Color_Change = QtWidgets.QMenu(self.menubar)
        self.menuLip_Color_Change.setObjectName("menuLip_Color_Change")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menuLip_Color_Change.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.img = None
        self.output_img = None


        self.input_image = QGraphicsScene()
        self.graphicsView.setScene(self.input_image)
        self.graphicsView.setAlignment(Qt.AlignTop | Qt.AlignLeft)
        self.graphicsView.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.graphicsView.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)

        self.output_image = QGraphicsScene()
        self.graphicsView_2.setScene(self.output_image)
        self.graphicsView_2.setAlignment(Qt.AlignTop | Qt.AlignLeft)
        self.graphicsView_2.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.graphicsView_2.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)

        self.dlg = QColorDialog(self.graphicsView)

        self.pushButton.clicked.connect(self.open)
        self.pushButton_12.clicked.connect(self.save_img)
        self.pushButton_13.clicked.connect(self.face_parsing)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Face Parsing Demo"))
        self.pushButton.setText(_translate("MainWindow", "Open Image"))
        self.pushButton_12.setText(_translate("MainWindow", "Save Image"))
        self.label_5.setText(_translate("MainWindow", "Input"))
        self.label_6.setText(_translate("MainWindow", "Output"))
        self.pushButton_13.setText(_translate("MainWindow", "Parsing"))
        self.label_9.setText(_translate("MainWindow", "hse@etri.re.kr"))
        self.menuLip_Color_Change.setTitle(_translate("MainWindow", "input size 256"))
import rsc_rc_x


if __name__ == "__main__":
    import sys

    suppress_qt_warnings()

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
